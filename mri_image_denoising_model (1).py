# -*- coding: utf-8 -*-
"""MRI image denoising model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rOlqokaVfuRWxTPxH5oxeg9WyCTfkxPN
"""

import numpy as np
import cv2
import os
from skimage import metrics
import tensorflow as tf
from tensorflow.keras import layers, models

np.random.seed(42)
tf.random.set_seed(42)

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)
        if img is not None:
            images.append(img)
    return images

def add_noise(image, noise_factor=0.5):
    noisy_image = image + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=image.shape)
    return np.clip(noisy_image, 0., 255.)

def create_dncnn_model(input_shape):
    model = models.Sequential()
    model.add(layers.Conv2D(64, (3, 3), padding='same', activation='relu', input_shape=input_shape))
    for _ in range(15):
        model.add(layers.Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(layers.Conv2D(1, (3, 3), padding='same'))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

image_folder = 'drive//MyDrive//preprocessed_images'
images = load_images_from_folder(image_folder)

X_train = []
Y_train = []
for img in images:
    noisy_img = add_noise(img)
    X_train.append(noisy_img)
    Y_train.append(img)

X_train = np.array(X_train).astype('float32') / 255.0
Y_train = np.array(Y_train).astype('float32') / 255.0

X_train = X_train.reshape(-1, X_train.shape[1], X_train.shape[2], 1)
Y_train = Y_train.reshape(-1, Y_train.shape[1], Y_train.shape[2], 1)

model = create_dncnn_model((X_train.shape[1], X_train.shape[2], 1))
model.summary()

model.fit(X_train, Y_train, epochs=50, batch_size=16, validation_split=0.1)

def evaluate_model(model, test_images):
    psnr_values = []
    ssim_values = []
    for img in test_images:
        noisy_img = add_noise(img)
        denoised_img = model.predict(noisy_img.reshape(1, img.shape[0], img.shape[1], 1))
        denoised_img = denoised_img.squeeze() * 255.0
        psnr = metrics.peak_signal_noise_ratio(img, denoised_img)
        ssim = metrics.structural_similarity(img, denoised_img, data_range=denoised_img.max() - denoised_img.min())
        psnr_values.append(psnr)
        ssim_values.append(ssim)
    return np.mean(psnr_values), np.mean(ssim_values)

mean_psnr, mean_ssim = evaluate_model(model, images)
print(f'Mean PSNR: {mean_psnr:.2f} dB')
print(f'Mean SSIM: {mean_ssim:.4f}')

from google.colab import drive
drive.mount('/content/drive')

